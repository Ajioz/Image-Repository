exports.login =  async(req, res) => {
   
    const { username, password } = req.body

    const user = users.find(user => user.username = username )
    
    let compare = username === users.username ? true : false
    // console.log(compare)

    if(user == null) return res.status(400).send('Null')

    try {
        if( await bcrypt.compare(password, user.password) && compare ){
            const admin = { username }
            const accessToken = jwt.sign(admin, process.env.ACCESS_TOKEN_SECRET, { expiresIn: '60s'});
            // res.json({accessToken})
            res.redirect('/api', {accessToken})
        } 
        else res.send('Not Allowed...')
    } catch (error) {
        res.status(500)
    }

}


exports.register = async(req, res) => {
    try {
        const { password } = req.body
        const hashedPassword = await bcrypt.hash(password, 10)
        const user = { username: req.body.username, password: hashedPassword }
        users.push(user)
        res.sendStatus(201)
    } catch (error) {
        res.sendStatus(500)
    }
    
}

exports.home = async(req, res) => {
    const all_images = await UploadModel.find()
    res.render('main', {images: all_images});
} 

exports.upload = (req, res, next) => {
    const files = req.files

    if(!files){
        const error = new Error('Please Choose Files')
        error.httpStatusCode = 400;
        return next(error)
    }

    //convert images into base 64 encoding
    let imgArray = files.map( file => {
        let img = fs.readFileSync(file.path)        //converting image into buffer and storing into img
        return encode_img = img.toString('base64')
    });
